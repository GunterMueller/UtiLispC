attributes.cl:	((type? background 'pixmap) ;; Background pixmap
attributes.cl:	((type? border 'pixmap) ;; Border pixmap
dependent.cl:(defmacro type? (object type)
display.cl:				      `((type? ,type 'drawable) ,type))
display.cl:				     (t `((type? ,type ',type) ,type)))
gcontext.cl:      (if (type? dashes 'sequence)
input.cl:				   (and (type? handler 'sequence)
input.cl:	   (if (type? handler 'sequence)
macros.cl:       `(and (type? ,thing ',stuff)
macros.cl:     `(and (type? ,thing 'card8) (write-card8 1 ,thing)))))
macros.cl:		   ((or *type-check?* (cdr types)) `((type? ,value ',type)))
macros.cl:    `(unless (type? ,value ,type)
macros.cl:	       `(if (type? ,var ',type)
requests.cl:       (if (type? background 'pixmap)
requests.cl:       (if (type? border 'pixmap)
requests.cl:      (if (type? drawable 'drawable)
resource.cl:  (let* ((screen (if (type? screen 'display)
resource.cl:  (let* ((screen (if (type? screen 'display)
text.cl:  (when (type? font 'gcontext)
text.cl:	      ((type? new-font 'font) (setq font new-font)))
text.cl:  (when (type? font 'gcontext)
text.cl:	      ((type? new-font 'font) (setq font new-font)))
text.cl:	(when (type? new-font 'font) 
text.cl:		    ((type? new-font 'font)
text.cl:		    ((type? new-font 'font)
text.cl:	(when (type? new-font 'font) 
text.cl:	    (when (and (index-zerop chunk) (type? font 'font))
text.cl:	    (when (and (index-zerop chunk) (type? font 'font))
