(mapc '(
(sizeof x)
(atom x)
(numberp x)
(stringp x)
(streamp x)
(vectorp x)
(referencep x)
(symbolp x)
(consp x)
(codep x)
(predefinedp x)
(eq x y)
(neq x y)
(equal x y)
(null x)
(fixp x)
(floatp x)
(integerp x)
(bigp x)
(eval x)
(apply fn arglist)
(funcall LSUBR)
(let MACROARG)
(lets MACROARG)
(return LSUBR)
(exit LSUBR)
(unbreak LSUBR)
(throw LSUBR)
(map list fn)
(mapc list fn)
(maplist list fn)
(mapcar list fn)
(mapcon list fn)
(mapcan list fn)
(mapv vector fn)
(mapvector vector fn)
(read (stream standard-input))
(readquote)
(print x (stream standard-output))
(prin1 x (stream standard-output))
(princ x (stream standard-output))
(terpri (stream standard-output))
(flush (stream standard-output))
(string-stream-index stream)
(string-stream-limit stream (limit))
(cursor (stream standard-output))
(colleft (stream standard-output))
(tab n (stream standard-output))
(linelength (stream standard-output))
(atomlength x)
(intern str (obvector obvector))
(intern-soft str (obvector obvector))
(tyi (stream standard-input))
(tyipeek (stream standard-input))
(readch (stream standard-input))
(tyo ch (stream standard-output))
(stream filename)
(string-stream string)
(inopen stream)
(append-open stream)
(outopen stream (dummy0) (dummy1))
(close stream)
(stream-mode stream)
(alloc filename)
(readmacro char fn (readtable readtable) (macrotable macrotable))
(readline (stream standard-input))
(current-line (stream standard-input))
(skipline (stream standard-input))
(single-character char (readtable readtable))
(caaadr x)
(caaddr x)
(cadadr x)
(caddar x)
(cdaadr x)
(cdaddr x)
(cddadr x)
(cdddar x)
(cddaar x)
(cddar x)
(cadaar x)
(cadar x)
(cdadar x)
(cdadr x)
(caadar x)
(caadr x)
(cdaaar x)
(cdaar x)
(cdar x)
(caaaar x)
(caaar x)
(caar x)
(cddddr x)
(cdddr x)
(cddr x)
(cdr x)
(cr x)
(seventh x)
(sixth x)
(fifth x)
(cadddr x)
(caddr x)
(cadr x)
(car x)
(cons x y)
(ncons x)
(xcons x y)
(last list)
(length list)
(nth n list)
(nthcdr n list)
(list LSUBR)
(append LSUBR)
(reverse list)
(nconc LSUBR)
(nreverse list)
(rplaca cell a)
(rplacd cell d)
(memq item list)
(delq item list (n))
(remq item list (n))
(member item list)
(mem pred item list)
(every list pred)
(some list pred)
(assq item alist)
(assoc item alist)
(ass pred item alist)
(copy x)
(subst to from list)
(defun MACROARG)
(macro MACROARG)
(set sym value)
(make-unbound sym)
(boundp sym)
(get sym name)
(putprop sym value name)
(remprop sym name)
(plist sym)
(setplist sym list)
(pname sym)
(symbol pname)
(symbol-copy sym)
(gensym (prefix) (begin))
(character x)
(string x)
(string-length str)
(string-lessp str1 str2)
(substring str (start 0) (end length))
(string-append LSUBR)
(string-reverse str)
(string-nreverse str)
(string-search-char char str (from 0))
(string-search-not-char char str (from 0))
(string-search key str (from 0))
(getchar str index)
(sref str index)
(sset str index char)
(string-equal str1 str2)
(cutout str pos length)
(spread value length)
(translate str table)
(string-amend str1 str2 (from 0))
(string-amend-or str1 str2 (from 0))
(string-amend-xor str1 str2 (from 0))
(string-amend-and str1 str2 (from 0))
(make-string length (char 0))
(bset str index value)
(bref str index)
(string-match pattern str)
(vref vector subscript)
(vset vector subscript value)
(vector-length vector)
(vector size (filler nil))
(reference vector subscript)
(deref ref)
(setref ref value)
(referred-vector ref)
(referred-index ref)
(fill-vector vector (filler nil))
(putd sym def)
(getd sym)
(make-undefined sym)
(definedp sym)
(specialp sym)
(funcname code)
(codesize code)
(minarg code)
(maxarg code)
(kernel-entry-vector)
(load-code x)
(readcode)
(hash x)
(err:unbound-variable var (where))
(err:argument-type x (where))
(err:undefined-function fn (where))
(err:implementation-restriction x (where))
(err:function x (where))
(err:variable x (where))
(err:number-of-arguments dc (where))
(err:index index (where))
(err:read dc (where))
(err:io stream (where))
(err:open-close stream (where))
(err:end-of-file stream (where))
(err:return dc (where))
(err:go tag (where))
(err:catch tag (where))
(err:zero-division dc (where))
(err:bignum-overflow dc (where))
(err:buffer-overflow dc (where))
(err:stack-overflow)
(backtrace (n))
(oldvalue (n))
(stackref index)
(heapsize)
(heapfree)
(symsize)
(symfree)
(fixsize)
(fixfree)
(stacksize)
(stack-used)
(gc)
(gccount)
(gctime)
(stack-bottom)
(stack-top)
(stack-base)
(/0= x)
(/0< x)
(/0> x)
(= x y)
(# x y)
(> LSUBR)
(>= LSUBR)
(< LSUBR)
(<= LSUBR)
(/- LSUBR)
(/+ LSUBR)
(* LSUBR)
(// LSUBR)
(\ x y)
(/1+ x)
(/1- x)
(logor LSUBR)
(logand LSUBR)
(logxor LSUBR)
(logshift x y)
(^ x y)
(zerop x)
(plusp x)
(minusp x)
(oddp x)
(plus LSUBR)
(difference LSUBR)
(times LSUBR)
(quotient LSUBR)
(remainder x y)
(add1 x)
(sub1 x)
(abs x)
(minus x)
(sin x)
(cos x)
(tan x)
(arcsin x)
(arccos x)
(arctan x)
(sqrt x)
(log x)
(log10 x)
(exp x)
(expt x y)
(^/$ x y)
(greaterp LSUBR)
(lessp LSUBR)
(max LSUBR)
(min LSUBR)
(/0=/$ x)
(/0</$ x)
(/0>/$ x)
(=/$ x y)
(#/$ x y)
(/-/$ LSUBR)
(/+/$ LSUBR)
(*/$ LSUBR)
(///$ LSUBR)
(\/$ x y)
(/1+/$ x)
(/1-/$ x)
(fix x)
(float x)
(>/$ LSUBR)
(>=/$ LSUBR)
(</$ LSUBR)
(<=/$ LSUBR)
(quit)
(abend)
(toplevel)
(utilisp)
(break (prompt "@ "))
(time (form))
(address obj)
(peek addr length)
(system-end-of-file x)
(systemcall str)
(systemchdir str)
(systemgetenv str)
(argv)
(localtime vec)
(gettimeofday)
(stdscr)
(initscr)
(waddch w ch)
(waddstr w str)
(wmove w y x)
(getyx w)
(winch w)
(wrefresh w)
(clrtobot w)
(wclrtoeol w)
(wdelch w)
(winsertln w)
(wdeleteln w)
(newwin lines cols by bx)
(delwin w)
(scrollok w flag)
(endwin)
)
(function (lambda (p) (putprop (car p) (cdr p) (quote function-description))))
)
