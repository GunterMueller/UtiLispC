; ((comment : rind)
 (declare
    (rind-indentation last-rind-prompt rind-readtable rind-macrotable)
    special)
 (defun rind-skip nil
    (loop (and (zerop (colleft standard-input))
               (do ((i (string-length prompt) (add1 i)))
                   ((>= i rind-indentation) t)
                   (setq prompt (string-append prompt " ")))
               (setq last-rind-prompt prompt))
          (or (memq (tyipeek) '(10 32)) (exit (tyipeek)))
          (tyi)))
 (defun rind-rpar ((super) (prompt prompt) 
                   (rind-indentation
                      (/+ (string-length last-rind-prompt)
                          (cursor standard-input)))
                   (r) (nextch (rind-skip)))
    (setq rind-indentation (/+ (string-length last-rind-prompt)
                               (cursor standard-input)))
    (loop (selectq nextch
             (41 (tyi) (exit (nreverse r)))				; ")"
             (93 (and super (tyi)) (exit (nreverse r)))			; "]"
             (46 (tyi) 							; "."
              (let ((l (nreverse r)))
               (and (or (= (setq nextch (rind-skip)) 41) (= nextch 93))
                    (funcall err:read standard-input 'rind))
               (cond ((null r) (setq l (read))) ((rplacd r (read))))
               (and (# (setq nextch (rind-skip)) 41)
                    (# nextch 93)
                    (funcall err:read standard-input 'rind))
               (and (not super) (# nextch 93) (tyi))
               (exit l))))
          (push (read) r)
          (cond ((atom (cdr r))
                 (setq nextch (rind-skip))
                 (setq rind-indentation (/+ (string-length last-rind-prompt) 
                                         (cursor standard-input))))
                ((setq nextch (rind-skip))))))
 (defun rind ((prompt prompt))
    (lets ((readtable (fill-vector rind-readtable readtable)) 
           (macrotable (fill-vector rind-macrotable macrotable)))
     (readmacro "(" (function rind-rpar))
     (readmacro "[" (function (lambda nil (rind-rpar t))))
     (single-character "]")
     (prog1 (read)
            (and (eq (tyipeek) 93) (tyi))
            (setq last-rind-prompt prompt))))
 (defun rind-init nil
    (setq rind-readtable (vector 256))
    (setq rind-macrotable (vector 256))
    (setq last-rind-prompt prompt))
 (rind-init)
;)
